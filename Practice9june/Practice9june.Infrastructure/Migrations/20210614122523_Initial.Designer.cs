// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Practice9june.Infrastructure;

namespace Practice9june.Infrastructure.Migrations
{
    [DbContext(typeof(FileSystemContext))]
    [Migration("20210614122523_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Practice9june.Models.Directory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentDirectoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ParentDirectoryId");

                    b.ToTable("Directories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "FirstDirectory"
                        },
                        new
                        {
                            Id = 2,
                            ParentDirectoryId = 1,
                            Title = "SecondDir"
                        },
                        new
                        {
                            Id = 3,
                            ParentDirectoryId = 1,
                            Title = "ThirdDir"
                        });
                });

            modelBuilder.Entity("Practice9june.Models.DirectoryPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DirectoryId")
                        .HasColumnType("int");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "DirectoryId");

                    b.HasIndex("DirectoryId");

                    b.ToTable("DirectoryPermissions");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DirectoryId = 2,
                            CanRead = true,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 1,
                            DirectoryId = 3,
                            CanRead = false,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 2,
                            DirectoryId = 3,
                            CanRead = true,
                            CanWrite = true
                        });
                });

            modelBuilder.Entity("Practice9june.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectoryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");
                });

            modelBuilder.Entity("Practice9june.Models.FilePermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("FilePermissions");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FileId = 1,
                            CanRead = true,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 2,
                            CanRead = false,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 3,
                            CanRead = true,
                            CanWrite = true
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 4,
                            CanRead = true,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 5,
                            CanRead = false,
                            CanWrite = true
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 6,
                            CanRead = true,
                            CanWrite = true
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 7,
                            CanRead = true,
                            CanWrite = true
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 7,
                            CanRead = false,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 7,
                            CanRead = true,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 10,
                            CanRead = true,
                            CanWrite = true
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 11,
                            CanRead = true,
                            CanWrite = false
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 12,
                            CanRead = false,
                            CanWrite = true
                        });
                });

            modelBuilder.Entity("Practice9june.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "email@gmail.com",
                            PasswordHash = "sdf3gh4j56432bnm,c.hgf",
                            UserName = "ForstUser"
                        },
                        new
                        {
                            Id = 2,
                            Email = "email@gmail.com",
                            PasswordHash = "fm,/",
                            UserName = "SecondUser"
                        },
                        new
                        {
                            Id = 3,
                            Email = "email@gmail.com",
                            PasswordHash = "fjzkvjdjkrbf",
                            UserName = "ThirdUser"
                        });
                });

            modelBuilder.Entity("Practice9june.Models.AudioFile", b =>
                {
                    b.HasBaseType("Practice9june.Models.File");

                    b.Property<int>("Bitrate")
                        .HasColumnType("int");

                    b.Property<int>("ChannelCount")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("SampleRate")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AudioFile");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            DirectoryId = 2,
                            Extention = "mp3",
                            Size = 3,
                            Title = "Lection1",
                            Bitrate = 12,
                            ChannelCount = 3,
                            Duration = 3,
                            SampleRate = 5
                        },
                        new
                        {
                            Id = 8,
                            DirectoryId = 3,
                            Extention = "mp3",
                            Size = 4,
                            Title = "Lection2",
                            Bitrate = 12,
                            ChannelCount = 3,
                            Duration = 3,
                            SampleRate = 5
                        },
                        new
                        {
                            Id = 9,
                            DirectoryId = 1,
                            Extention = "mp3",
                            Size = 5,
                            Title = "Lection3",
                            Bitrate = 12,
                            ChannelCount = 3,
                            Duration = 3,
                            SampleRate = 5
                        });
                });

            modelBuilder.Entity("Practice9june.Models.ImageFile", b =>
                {
                    b.HasBaseType("Practice9june.Models.File");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ImageFile");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            DirectoryId = 1,
                            Extention = "jpg",
                            Size = 5,
                            Title = "Image1",
                            Height = 400,
                            Width = 400
                        },
                        new
                        {
                            Id = 11,
                            DirectoryId = 2,
                            Extention = "jpg",
                            Size = 5,
                            Title = "Image2",
                            Height = 400,
                            Width = 400
                        },
                        new
                        {
                            Id = 12,
                            DirectoryId = 3,
                            Extention = "jpg",
                            Size = 5,
                            Title = "Image3",
                            Height = 400,
                            Width = 400
                        });
                });

            modelBuilder.Entity("Practice9june.Models.TextFile", b =>
                {
                    b.HasBaseType("Practice9june.Models.File");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TextFile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectoryId = 2,
                            Extention = "txt",
                            Size = 5,
                            Title = "C# file",
                            Content = "using System..."
                        },
                        new
                        {
                            Id = 2,
                            DirectoryId = 3,
                            Extention = "txt",
                            Size = 5,
                            Title = "EF tutorial",
                            Content = "Entity Framework"
                        },
                        new
                        {
                            Id = 3,
                            DirectoryId = 3,
                            Extention = "txt",
                            Size = 5,
                            Title = "Dapper tutorial",
                            Content = "Dapper is ORM"
                        });
                });

            modelBuilder.Entity("Practice9june.Models.VideoFile", b =>
                {
                    b.HasBaseType("Practice9june.Models.File");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("VideoFile_Duration");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("VideoFile_Height");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasColumnName("VideoFile_Width");

                    b.HasDiscriminator().HasValue("VideoFile");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            DirectoryId = 1,
                            Extention = "mp4",
                            Size = 0,
                            Title = "Me at the zoo",
                            Duration = 20,
                            Height = 720,
                            Width = 1080
                        },
                        new
                        {
                            Id = 5,
                            DirectoryId = 2,
                            Extention = "mp4",
                            Size = 0,
                            Title = "C# Crash course",
                            Duration = 50,
                            Height = 720,
                            Width = 1080
                        },
                        new
                        {
                            Id = 6,
                            DirectoryId = 3,
                            Extention = "mp4",
                            Size = 0,
                            Title = "Despacito",
                            Duration = 5,
                            Height = 720,
                            Width = 1080
                        });
                });

            modelBuilder.Entity("Practice9june.Models.Directory", b =>
                {
                    b.HasOne("Practice9june.Models.Directory", "ParentDirectory")
                        .WithMany("Directories")
                        .HasForeignKey("ParentDirectoryId");

                    b.Navigation("ParentDirectory");
                });

            modelBuilder.Entity("Practice9june.Models.DirectoryPermission", b =>
                {
                    b.HasOne("Practice9june.Models.Directory", "Directory")
                        .WithMany("DirectoryPermissions")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Practice9june.Models.User", "User")
                        .WithMany("DirectoryPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Practice9june.Models.File", b =>
                {
                    b.HasOne("Practice9june.Models.Directory", "Directory")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("Practice9june.Models.FilePermission", b =>
                {
                    b.HasOne("Practice9june.Models.File", "File")
                        .WithMany("FilePermissions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Practice9june.Models.User", "User")
                        .WithMany("FilePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Practice9june.Models.Directory", b =>
                {
                    b.Navigation("Directories");

                    b.Navigation("DirectoryPermissions");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Practice9june.Models.File", b =>
                {
                    b.Navigation("FilePermissions");
                });

            modelBuilder.Entity("Practice9june.Models.User", b =>
                {
                    b.Navigation("DirectoryPermissions");

                    b.Navigation("FilePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
